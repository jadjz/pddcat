#!/usr/bin/env python3

import os
import re
import shutil
import sys
import urllib.request
import platform
import argparse

# ---
# CONST
# ---

# global path values for src/dest
DWN_DIR = ''
DEST_DIR = ''

# default values for initial config
DEF_DWN_DIR = ''
DEF_DEST_DIR = ''

# curated list direct url
LIST_URL = 'https://raw.githubusercontent.com/kittenparry/pddcat/master/db/curated_list.txt'

# absolute path of where pddcat is
PDDCAT_DIR = os.path.dirname(os.path.realpath(__file__))
PDDCAT_SUBDIR = os.path.join(PDDCAT_DIR, 'pddcat_files')
CURATED_LIST = os.path.join(PDDCAT_SUBDIR, 'curated_list.txt')
CUSTOM_LIST = os.path.join(PDDCAT_SUBDIR, 'custom_list.txt')
CONFIG = os.path.join(PDDCAT_SUBDIR, 'pddcat.conf')

# colourful messages
class COL:
	FAIL = '\033[91m'
	WARNING = '\033[93m'
	UNDERLINE = '\033[4m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'
	if platform.system() == 'Windows':
		FAIL = ''
		WARNING = ''
		UNDERLINE = ''
		BOLD = ''
		ENDC = ''

# configuration text
CONF_CONT = '# src=path/to/src\n# dest=path/to/dest\n# Tilde (~) could be used instead of absolute path to home.\n' \
	'# Check --help to set up from command line\nsrc=%s\ndest=%s\n'

# ---
# START
# ---

def start():
	create_custom_list()

	parser = argparse.ArgumentParser(description='Organise your all-in-one porn download directory into separate directories by model names.')
	parser.add_argument('-s', '--source', metavar='path',
		help='downloads dir where files are matched & moved from.',
		type=str)
	parser.add_argument('-d', '--dest', metavar='path',
		help='archive dir where directories with model names are created & files moved to.',
		type=str)
	parser.add_argument('-w', '--working-dir',
		help='temporarily source from current working directory. can not be combined with other options.',
		action='store_true')
	parser.add_argument('-c', '--curated-list',
		help='download a list of model names for a quick start.',
		action='store_true')
	parser.add_argument('-a', '--add', metavar='name',
		help='add your own model names to a different file. use underscore (_) in place of spaces and use space to separate multiple names. e.g. riley_reid bryci',
		type=str, nargs='+')

	args = parser.parse_args()
	read_conf()
	if len(sys.argv) == 1:
		are_paths_set()
		move_dirs()
	else:
		if args.working_dir:
			if len(sys.argv) == 2:
				global DWN_DIR
				DWN_DIR = os.getcwd()
				are_paths_set()
				move_dirs()
			else:
				print('%sERROR%s: Can not be combined with other options. Run -w by itself.' % (COL.FAIL, COL.ENDC))
				sys.exit(1)
		if args.source or args.dest:
			edit_conf(args.source, args.dest)
		if args.curated_list:
			download_list()
		if args.add:
			add_names(args.add)

# ---
# ARG FUNCS
# ---

def create_custom_list():
	"""Create pddcat_files/ along with pddcat.conf & custom_list.txt in it.
	Also print first time run message prompting user to set src & dest path.
	"""
	if not os.path.isdir(PDDCAT_SUBDIR):
		os.makedirs(PDDCAT_SUBDIR)
		print('%s has been created.' % PDDCAT_SUBDIR)
	if not os.path.isfile(CONFIG):
		with open(CONFIG, 'w') as conf:
			conf.writelines(CONF_CONT % (DEF_DWN_DIR, DEF_DEST_DIR))
	if not os.path.isfile(CUSTOM_LIST):
		with open(CUSTOM_LIST, 'w') as custom:
			custom.writelines('# Usage -a <model> <model2>... option or manually add model names you want.\n' \
				'# Use underscore (_) when a space is needed. e.g. riley_reid\n')
		print('%s has been created.\nUse -a <model> <model2>... option to add models.' % CUSTOM_LIST)
		print('-----\n%sFirst time start message%s\n' \
			'Please change %ssource%s & %sdestination%s paths to your needs using:\n' \
			' -s /path/to/src -d /path/to/dest\n' \
			'If you keep seeing this message make sure you have write permissions & custom_list.txt exists.\n' \
			'Terminating now. Please rerun for actual functionality.' % 
			(COL.UNDERLINE, COL.ENDC, COL.BOLD, COL.ENDC, COL.BOLD, COL.ENDC))
		sys.exit()

def add_names(names):
	"""Append new model names to custom_list.txt.
	
	keyword args:
	names -- list of names passed using -a option
	"""
	names = [x.lower() for x in names]
	try:
		with open(CUSTOM_LIST, 'a') as custom:
			custom.writelines('\n'.join(names) + '\n')
		print('%s tag(s) has been appended to custom_list.txt.' % ', '.join(names))
	except Exception as e:
		prn_gen_err(e)

def get_opener():
		"""Set request user-agent."""
		opener = urllib.request.build_opener()
		opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36')]
		urllib.request.install_opener(opener)

def download_list():
	"""Download curated_list.txt from GitHub to pddcat_files/"""
	get_opener()
	try:
		urllib.request.urlretrieve(LIST_URL, CURATED_LIST)
		print('Curated list has been downloaded to %s' % CURATED_LIST)
	except Exception as e:
		prn_gen_err(e)

def edit_conf(src, dest):
	"""Change source/destination values in pddcat.conf.
	If only one is provided read the other one from the value in memory.
	
	keyword args:
	src -- string value of source path passed using -s option
	dest -- string value of destination path passed using -d option
	"""
	global DWN_DIR, DEST_DIR
	text = ''
	if src == None:
		src = DWN_DIR
	else:
		text += 'Source has been set to: %s\n' % src
	if dest == None:
		dest = DEST_DIR
	else:
		text += 'Destination has been set to: %s' % dest

	try:
		with open(CONFIG, 'w') as conf:
			data = CONF_CONT % (src, dest)
			conf.writelines(data)
		print(text)
	except Exception as e:
		prn_gen_err(e)

def read_conf():
	"""At launch, read path values from pddcat.conf."""
	global DWN_DIR, DEST_DIR
	try:
		temp = list(filter(None, open(CONFIG).read().split('\n')))
		for line in temp:
			if line.startswith('#'):
				pass
			else:
				if line.startswith('src='):
					DWN_DIR = check_path(line, 'src=')
				if line.startswith('dest='):
					DEST_DIR = check_path(line, 'dest=')
	except FileNotFoundError:
		print('%sWARNING%s: pddcat.conf does not exist, re-run the program with no parameters to create it.\n' \
			'Or check writing permissions.' % (COL.WARNING, COL.ENDC))

def check_path(line, sord):
	"""Sterilise path value read from pddcat.conf in read_conf().
	Removing any leading or trailing whitespace, replace ~ with $HOME if starts with ~.
	Create directory if it doesn't already exist.
	
	keyword args:
	line -- line of string read from config file that has path information
	sord -- src or dest, first part of line that gets removed with equals sign
	"""
	input_src = line.replace(sord, '', 1).strip()
	if input_src == '':
		return ''
	input_src = if_home(input_src)
	if os.path.isdir(input_src):
		return input_src
	else:
		try:
			os.makedirs(input_src)
			return input_src
		except Exception as e:
			print('%sERROR%s: Can not create %s.\nCheck write permissions or make sure it is a proper path.' % (COL.FAIL, COL.ENDC, input_src))
			return ''

def if_home(val):
	"""Return replacing ~ with $HOME value if starts with ~, return itself if not.
	
	keyword args:
	val -- path string
	"""
	if val.startswith('~'):
		return val.replace('~', os.path.expanduser('~'), 1)
	return val

def are_paths_set():
	"""Terminate the program if source or destination is an empty value."""
	global DWN_DIR, DEST_DIR
	if DWN_DIR == '' or DEST_DIR == '':
		print('%sERROR%s: Please set %ssource%s & %sdestination%s directory using\n -s /path/to/dir -d /path/to/dir\n' \
			'Or manually in %s.\nCheck help with -h. Terminating...' % 
			(COL.FAIL, COL.ENDC, COL.BOLD, COL.ENDC, COL.BOLD, COL.ENDC, CONFIG))
		sys.exit(1)

# ---
# GET LIST
# ---

def get_lists():
	"""Read list of names from curated_list.txt, custom_list.txt and return a modified version with regex.
	Do not accept lines with a hash (#), replace underscore with a whitespace, dot, underscore or nothing regex,
	Sort the list by length, then reverse (longer names are on top).
	"""
	temp_names_list = []
	try:
		temp_names_list += filter(None, open(CURATED_LIST).read().split('\n'))
	except FileNotFoundError:
		print('%sWARNING%s: curated_list.txt does not exist, use -c option to download.' % (COL.WARNING, COL.ENDC))
	try:
		temp_names_list += filter(None, open(CUSTOM_LIST).read().split('\n'))
	except FileNotFoundError:
		print('%sWARNING%s: custom_list.txt does not exist, re-run the program with no parameters to create it.\n' \
			'Or check writing permissions.' % (COL.WARNING, COL.ENDC))

	cleared_list = filter(None, temp_names_list)
	cleared_list = list(dict.fromkeys(cleared_list))
	reg_names = []

	for el in cleared_list:
		# don't add names that start with a hash
		if el.startswith('#'):
			pass
		else:
			# replace _ with regex whitespace or dot or nothing
			el = el.replace('_', '[\. _-]*')
			reg_names.append(el)

	# sort by length descending
	temp = sorted(reg_names, key=len)
	temp.reverse()
	return temp

# ---
# MOVE DIRS/FILES
# ---

def move_dirs():
	"""Initiate moving process, create directories in destination if there is a match in source directory.
	Move matching files/directories there.
	"""
	tags = list(get_lists())
	downloads = os.listdir(DWN_DIR)
	num_of_mv = 0

	for tag in tags:
		match = list(filter(re.compile(tag, re.IGNORECASE).search, downloads))
		if len(match) > 0:
			for down in match:
				num_of_mv += 1
				full_path = os.path.join(DWN_DIR, down)
				if os.path.isdir(full_path):
					dir_or_file = 'DIR'
				elif os.path.isfile(full_path):
					dir_or_file = 'FILE'
				else:
					dir_or_file = 'ELSE??'

				if dir_or_file == 'ELSE??':
					print('%sWARNING%s: Multiple model directories/files only get moved to one directory.' \
						' See issue #4 on GitHub.' % (COL.WARNING, COL.ENDC))
					continue
				print('Moving %s: %s.' % (dir_or_file, down))
				try:
					# turn regex back to normal directory names
					tag = tag.replace('[\. _-]*', '_')
					os.makedirs(os.path.join(DEST_DIR, tag), exist_ok=True)
					shutil.move(full_path, os.path.join(DEST_DIR, tag, down))
				except Exception as e:
					prn_gen_err(e)

	if num_of_mv == 0:
		print('No matches, nothing moved. Terminating...')
		sys.exit()

# ---
# OTH
# ---

def prn_gen_err(e):
	"""Print a general, formatted red error message."""
	print('%sERROR%s: %s' % (COL.FAIL, COL.ENDC, e))


if __name__ == '__main__':
	start()
