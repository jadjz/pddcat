#!/usr/bin/env python3

import os
import re
import shutil
import sys
import urllib.request
import platform
import argparse

# ---
# CONST
# ---

"""
	EDIT THESE 2 VARIABLES FOR YOUR OWN USE

	DWN_DIR: User downloads directory (source).
	DEST_DIR: User archive directory (destination), where named directories are created.

	Use os.path.expanduser('~') to get '~'

	Linux:   os.path.join('/home', 'path', 'to', 'dir')
	Windows: os.path.join('c:/', 'path', 'to', 'dir')

	Or you can try using a string at your own discretion.
	DON'T END IN A SLASH (/ or \)!
	Linux:   '/home/path/to/dir'
	Windows: 'c:/path/to/dir' or 'c:\path\\to\dir' (if you'd like to escape everything)
"""
DWN_DIR = os.path.join('/mnt', 'disk-j', 'lin_downs_c')
DEST_DIR = os.path.join('/mnt', 'disk-j', 'arch', 'porn')

# curated list direct url
LIST_URL = 'https://raw.githubusercontent.com/kittenparry/pddcat/master/db/curated_list.txt'

# absolute path of where pddcat is
PDDCAT_DIR = os.path.dirname(os.path.realpath(__file__))
PDDCAT_SUBDIR = os.path.join(PDDCAT_DIR, 'pddcat_files')
CURATED_LIST = os.path.join(PDDCAT_SUBDIR, 'curated_list.txt')
CUSTOM_LIST = os.path.join(PDDCAT_SUBDIR, 'custom_list.txt')

# colourful messages
class COL:
	FAIL = '\033[91m'
	WARNING = '\033[93m'
	UNDERLINE = '\033[4m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'
	if platform.system() == 'Windows':
		FAIL = ''
		WARNING = ''
		UNDERLINE = ''
		BOLD = ''
		ENDC = ''

# ---
# START
# ---

def start():
	create_custom_list()

	parser = argparse.ArgumentParser(description='Organise your porn download directory into separate directories.')
	parser.add_argument('-c', '--curated-list',
		help='download a list of model names for a quick start.', action='store_true')
	parser.add_argument('-a', '--add', metavar='name',
		help='add your own model names to a different file. use underscore (_) in place of spaces and space to separate more than one names. e.g. riley_reid bryci',
		type=str, nargs='+')
	parser.add_argument('-s', '--source', metavar='path',
		help='downloads dir where files are matched & moved from.',
		type=str)
	parser.add_argument('-d', '--dest', metavar='path',
		help='archive dir where directories with model names are created & files moved to.',
		type=str)

	args = parser.parse_args()
	if len(sys.argv) == 1:
		move_dirs()
	else:
		if args.curated_list:
			download_list()
		if args.add:
			add_names(args.add)
		# here's what i needed, ability to check if args.source & args.dest both exists

# ---
# ARG FUNCS
# ---

def create_custom_list():
	if not os.path.isdir(PDDCAT_SUBDIR):
		os.makedirs(PDDCAT_SUBDIR)
		print('%s has been created.' % PDDCAT_SUBDIR)
	if not os.path.isfile(CUSTOM_LIST):
		with open(CUSTOM_LIST, 'w') as custom:
			custom.writelines('# Usage -a <model> <model2>... option or manually add model names you want.\n' \
				'# Use underscore (_) when a space is needed. e.g. riley_reid\n')
		print('%s has been created.\nUse -a <model> <model2>... option to add models.' % CUSTOM_LIST)
		print('-----\n%sFirst time start message%s\n' \
			'Please change %sDWN_DIR%s & %sDEST_DIR%s variables to your needs.\n' \
			'Read top of the file or GitHub repo on how to.\n' \
			'If you keep seeing this message make sure you have write permissions & custom_list.txt exists.\n' \
			'Terminating now. Please rerun for actual functionality.' % 
			(COL.UNDERLINE, COL.ENDC, COL.BOLD, COL.ENDC, COL.BOLD, COL.ENDC))
		sys.exit()

def add_names(names):
	try:
		with open(CUSTOM_LIST, 'a') as custom:
			custom.writelines('\n'.join(names) + '\n')
		print('%s tag(s) has been appended to custom_list.txt.' % ', '.join(names))
	except Exception as e:
		prn_gen_err(e)

def get_opener():
		"""Set request user-agent."""
		opener = urllib.request.build_opener()
		opener.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36')]
		urllib.request.install_opener(opener)

def download_list():
	get_opener()
	try:
		urllib.request.urlretrieve(LIST_URL, CURATED_LIST)
		print('Curated list has been downloaded to %s' % CURATED_LIST)
	except Exception as e:
		prn_gen_err(e)

# ---
# GET LIST
# ---

def get_lists():
	temp_names_list = []
	try:
		temp_names_list += filter(None, open(CURATED_LIST).read().split('\n'))
	except FileNotFoundError as e:
		print('%sWARNING%s: curated_list.txt does not exist, use -c option to download.' % (COL.WARNING, COL.ENDC))
	try:
		temp_names_list += filter(None, open(CUSTOM_LIST).read().split('\n'))
	except FileNotFoundError as e:
		print('%sWARNING%s: custom_list.txt does not exist, re-run the program with no parameters to create it.\n' \
			'Or check writing permissions.' % (COL.WARNING, COL.ENDC))

	cleared_list = filter(None, temp_names_list)
	cleared_list = list(dict.fromkeys(cleared_list))
	reg_names = []

	for el in cleared_list:
		# don't add names that start with a hash
		if el.startswith('#'):
			pass
		else:
			# replace _ with regex whitespace or dot or nothing
			el = el.replace('_', '[\. _-]*')
			reg_names.append(el)

	# sort by length descending
	temp = sorted(reg_names, key=len)
	temp.reverse()
	return temp

# ---
# MOVE DIRS/FILES
# ---

def move_dirs():
	tags = list(get_lists())
	downloads = os.listdir(DWN_DIR)
	num_of_mv = 0

	for tag in tags:
		match = list(filter(re.compile(tag, re.IGNORECASE).search, downloads))
		if len(match) > 0:
			for down in match:
				num_of_mv += 1
				full_path = os.path.join(DWN_DIR, down)
				if os.path.isdir(full_path):
					dir_or_file = 'DIR'
				elif os.path.isfile(full_path):
					dir_or_file = 'FILE'
				else:
					dir_or_file = 'ELSE??'
				print('Moving %s: %s.' % (dir_or_file, down))
				try:
					# turn regex back to normal directory names
					tag = tag.replace('[\. _-]*', '_')
					os.makedirs(os.path.join(DEST_DIR, tag), exist_ok=True)
					shutil.move(full_path, os.path.join(DEST_DIR, tag, down))
				except FileNotFoundError as e:
					print('%sWARNING%s: Multiple model directories/files only get moved to one directory. See issue #4 on GitHub.' % (COL.WARNING, COL.ENDC))
				except Exception as e:
					prn_gen_err(e)

	if num_of_mv == 0:
		print('No matches, nothing moved. Terminating...')
		sys.exit()

# ---
# OTH
# ---

def prn_gen_err(e):
	print('%sERROR%s: %s', (COL.FAIL, COL.ENDC, e))


if __name__ == '__main__':
	start()
