#!/usr/bin/env python3

# Creates a list with duplicates removed,
# names starting with underscore or dash or is 'unorganised' filtered
# and regex appended
import os

LOOP_PARTITION_LETTERS = ['d', 'e', 'f', 'g', 'h', 'j']
LOOP_PATH = [
	os.path.join('Archive', 'porn', 'vids'),
	os.path.join('Archive', 'porn', 'pics'),
	os.path.join('Downloads', 'porn'),
	os.path.join('arch', 'porn') # same as ARCH_DIR
]
dirs_prefix = []
for letter in LOOP_PARTITION_LETTERS:
	dirs_prefix.append(os.path.join('/mnt', 'disk-%s' % letter))


names_list = []
for prefix in dirs_prefix:
	for suffix in LOOP_PATH:
		try:
			names_list += os.listdir(os.path.join(prefix, suffix))
		except FileNotFoundError:
			pass


cleared_list = filter(None, names_list)
cleared_list = list(dict.fromkeys(cleared_list))
temp = []

for el in cleared_list:
	# don't add names that start with underscore or dash or is 'unorganised'
	# or is 'rin', too short and causing a lot of headache
	if el.startswith('_') or el.startswith('-') or el == 'unorganised' or el == 'rin':
		# for whatever reason this didn't catch a few, so we're doing it the other way
		# cleared_list.remove(el)
		pass
	else:
		# replace _ with regex whitespace or dot
		el = el.replace('_', '[\. _-]*')
		temp.append(el)

# sort by length descending test
temp2 = sorted(temp, key=len)
temp2.reverse()

try:
	f = open('filtered_list.txt', 'w')
	for l in temp2:
		f.write("%s\n" % l)
except IOError as e:
	print(e)
